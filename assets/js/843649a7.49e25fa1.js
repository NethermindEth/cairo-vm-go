"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[227],{3905:(t,e,a)=>{a.d(e,{Zo:()=>c,kt:()=>k});var n=a(7294);function r(t,e,a){return e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}function i(t,e){var a=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),a.push.apply(a,n)}return a}function l(t){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?i(Object(a),!0).forEach((function(e){r(t,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(a,e))}))}return t}function o(t,e){if(null==t)return{};var a,n,r=function(t,e){if(null==t)return{};var a,n,r={},i=Object.keys(t);for(n=0;n<i.length;n++)a=i[n],e.indexOf(a)>=0||(r[a]=t[a]);return r}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(n=0;n<i.length;n++)a=i[n],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(t,a)&&(r[a]=t[a])}return r}var s=n.createContext({}),p=function(t){var e=n.useContext(s),a=e;return t&&(a="function"==typeof t?t(e):l(l({},e),t)),a},c=function(t){var e=p(t.components);return n.createElement(s.Provider,{value:e},t.children)},u="mdxType",d={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},m=n.forwardRef((function(t,e){var a=t.components,r=t.mdxType,i=t.originalType,s=t.parentName,c=o(t,["components","mdxType","originalType","parentName"]),u=p(a),m=r,k=u["".concat(s,".").concat(m)]||u[m]||d[m]||i;return a?n.createElement(k,l(l({ref:e},c),{},{components:a})):n.createElement(k,l({ref:e},c))}));function k(t,e){var a=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var i=a.length,l=new Array(i);l[0]=m;var o={};for(var s in e)hasOwnProperty.call(e,s)&&(o[s]=e[s]);o.originalType=t,o[u]="string"==typeof t?t:r,l[1]=o;for(var p=2;p<i;p++)l[p]=a[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},4331:(t,e,a)=>{a.r(e),a.d(e,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var n=a(7462),r=(a(7294),a(3905));const i={sidebar_position:3},l="Hints",o={unversionedId:"vm-fundamentals/hints",id:"vm-fundamentals/hints",title:"Hints",description:"There are several hints, explain each of them here. How they interact with the VM and affect it.",source:"@site/docs/vm-fundamentals/hints.md",sourceDirName:"vm-fundamentals",slug:"/vm-fundamentals/hints",permalink:"/docs/vm-fundamentals/hints",draft:!1,editUrl:"https://github.com/NethermindEth/cairo-vm-go/tree/main/docs/docs/vm-fundamentals/hints.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Builtins Documentation",permalink:"/docs/vm-fundamentals/builtins"},next:{title:"VM - Extras",permalink:"/docs/category/vm---extras"}},s={},p=[{value:"Dictionaries",id:"dictionaries",level:2}],c={toc:p},u="wrapper";function d(t){let{components:e,...a}=t;return(0,r.kt)(u,(0,n.Z)({},c,a,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"hints"},"Hints"),(0,r.kt)("p",null,"There are several hints, explain each of them here. How they interact with the VM and affect it."),(0,r.kt)("h2",{id:"dictionaries"},"Dictionaries"),(0,r.kt)("p",null,"In the Cairo VM, dictionaries are represented by memory segments managed by the ",(0,r.kt)("strong",{parentName:"p"},"ZeroDictionaryManager")," within a scope handled by the ",(0,r.kt)("strong",{parentName:"p"},"ScopeManager"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"ZeroDictionaryManager")),(0,r.kt)("p",null,"A ",(0,r.kt)("strong",{parentName:"p"},"ZeroDictionaryManager")," maps a segment index to a ",(0,r.kt)("strong",{parentName:"p"},"ZeroDictionary"),". Different dictionary managers can exist in various scopes."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"ZeroDictionary")),(0,r.kt)("p",null,"A ",(0,r.kt)("strong",{parentName:"p"},"ZeroDictionary")," consists of three fields:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Data"),": A map storing the (key, value) pairs of the dictionary."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"DefaultValue"),": An optional field holding the default value for a key if it doesn't exist in the Data field."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"FreeOffset"),": Tracks the next free offset in the dictionary segment.")),(0,r.kt)("p",null,"A dictionary segment writes data in sets of three values:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Key")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Previous Value")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"New Value"))),(0,r.kt)("p",null,"For example, if key k1 has a value v1 and is updated to value v2, the dictionary segment will write three values: k1, v1, and v2 in consecutive offsets. Any dictionary access operation, such as reading or writing, will similarly add data to the segment. For instance, a read operation on key k1 with value v1 will write k1, v1, and v1 to consecutive offsets."),(0,r.kt)("p",null,"Dictionary operations in Cairo are covered in two library files:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/starkware-libs/cairo-lang/blob/master/src/starkware/cairo/common/dict.cairo"},"dict.cairo")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/starkware-libs/cairo-lang/blob/master/src/starkware/cairo/common/default_dict.cairo"},"default_dict.cairo"))),(0,r.kt)("p",null,"These functions require specific hints to be implemented in the VM."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Dict functions:")),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"dict_new"),(0,r.kt)("li",{parentName:"ol"},"default_dict_new"),(0,r.kt)("li",{parentName:"ol"},"dict_read"),(0,r.kt)("li",{parentName:"ol"},"dict_write"),(0,r.kt)("li",{parentName:"ol"},"dict_update"),(0,r.kt)("li",{parentName:"ol"},"dict_squash")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Hint usage in dict functions:")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Hint"),(0,r.kt)("th",{parentName:"tr",align:null},"Usage"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"DictNew"),(0,r.kt)("td",{parentName:"tr",align:null},"dict_new, dict_squash")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"DefaultDictNew"),(0,r.kt)("td",{parentName:"tr",align:null},"default_dict_new")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"DictRead"),(0,r.kt)("td",{parentName:"tr",align:null},"dict_read")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"DictWrite"),(0,r.kt)("td",{parentName:"tr",align:null},"dict_write")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"DictUpdate"),(0,r.kt)("td",{parentName:"tr",align:null},"dict_update")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"DictSquashCopyDict"),(0,r.kt)("td",{parentName:"tr",align:null},"dict_squash")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"VMExitScope"),(0,r.kt)("td",{parentName:"tr",align:null},"dict_squash")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"SquashDict"),(0,r.kt)("td",{parentName:"tr",align:null},"dict_squash")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"SquashDictInnerFirstIteration"),(0,r.kt)("td",{parentName:"tr",align:null},"dict_squash")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"SquashDictInnerSkipLoop"),(0,r.kt)("td",{parentName:"tr",align:null},"dict_squash")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"SquashDictInnerCheckAccessIndex"),(0,r.kt)("td",{parentName:"tr",align:null},"dict_squash")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"SquashDictInnerContinueLoop"),(0,r.kt)("td",{parentName:"tr",align:null},"dict_squash")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"SquashDictInnerLenAssert"),(0,r.kt)("td",{parentName:"tr",align:null},"dict_squash")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"SquashDictInnerUsedAccessesAssert"),(0,r.kt)("td",{parentName:"tr",align:null},"dict_squash")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"SquashDictInnerAssertLenKeys"),(0,r.kt)("td",{parentName:"tr",align:null},"dict_squash")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"SquashDictInnerNextKey"),(0,r.kt)("td",{parentName:"tr",align:null},"dict_squash")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"DictSquashUpdatePtr"),(0,r.kt)("td",{parentName:"tr",align:null},"dict_squash")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"dict_new")),(0,r.kt)("p",null,"Creates a new dictionary. It requires an ",(0,r.kt)("strong",{parentName:"p"},"initial_dict")," variable set in the scope. The ",(0,r.kt)("strong",{parentName:"p"},"DictNew")," hint creates a new ",(0,r.kt)("strong",{parentName:"p"},"DictionaryManager")," in the scope if not present and uses the ",(0,r.kt)("strong",{parentName:"p"},"initial_dict")," variable to seed and create a new dictionary."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"default_dict_new")),(0,r.kt)("p",null,"Creates a new dictionary with a default value. It expects a ",(0,r.kt)("strong",{parentName:"p"},"default_value")," Cairo variable. The ",(0,r.kt)("strong",{parentName:"p"},"DefaultDictNew")," hint creates a new ",(0,r.kt)("strong",{parentName:"p"},"DictionaryManager")," in the scope if not present and creates a new dictionary where the default value for a key not present in the Data field is the ",(0,r.kt)("strong",{parentName:"p"},"default_value")," variable."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"dict_read")),(0,r.kt)("p",null,"Reads a value from the dictionary and returns it. Reading a key involves writing three values to the dictionary segment: key, previous value, and new value. The ",(0,r.kt)("strong",{parentName:"p"},"DictRead")," hint increments the current_ptr of the dictionary in the ",(0,r.kt)("strong",{parentName:"p"},"DictionaryManager")," by three and writes the read value to a Cairo variable ",(0,r.kt)("strong",{parentName:"p"},"value"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"dict_write")),(0,r.kt)("p",null,"Writes a value to the dictionary, overriding the existing value. Writing a key involves writing three values to the dictionary segment: key, previous value, and new value. The ",(0,r.kt)("strong",{parentName:"p"},"DictWrite")," hint increments the current_ptr of the dictionary in the ",(0,r.kt)("strong",{parentName:"p"},"DictionaryManager")," by three, updates the actual value of the key in the ",(0,r.kt)("strong",{parentName:"p"},"Dictionary"),", and writes the ",(0,r.kt)("strong",{parentName:"p"},"prev_value")," to the dictionary segment."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"dict_update")),(0,r.kt)("p",null,"Updates a value in the dictionary. Updating a key involves writing three values to the dictionary segment: key, previous value, and new value. The ",(0,r.kt)("strong",{parentName:"p"},"DictUpdate")," hint increments the current_ptr of the dictionary in the ",(0,r.kt)("strong",{parentName:"p"},"DictionaryManager")," by three, updates the actual value of the key in the ",(0,r.kt)("strong",{parentName:"p"},"Dictionary"),", and asserts that the given Cairo variable prev_value matches the key's value before updating."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"dict_squash")),(0,r.kt)("p",null,"Returns a new dictionary with one DictAccess instance per key (value before and value after) summarizing all the changes to that key. The dict_squash function involves 13 hints, as shown in the table above."),(0,r.kt)("p",null,"Example:"),(0,r.kt)("p",null,"Input: {(key1, 0, 2), (key1, 2, 7), (key2, 4, 1), (key1, 7, 5), (key2, 1, 2)}"),(0,r.kt)("p",null,"Output: {(key1, 0, 5), (key2, 4, 2)}"))}d.isMDXComponent=!0}}]);